# Creates a Win32 package and imports into a target Intune tenant
# Uses secrets on the repo - TENANT_ID, CLIENT_ID, and CLIENT_SECRET
# to import the package into a target tenant
name: New Win32 Update

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
  workflow_dispatch:
    inputs:
      package:
        description: Update name.
        required: true
        type: string
        default: AdobeAcrobatReaderDCMUI

jobs:
  create-package:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Test for package/s
        id: test-package
        shell: powershell
        working-directory: ${{ github.workspace }}
        run: |
          [System.Array] $Applications = ("${{ github.event.inputs.package }}").ToString() -split ","
          foreach ($App in $Applications) {
              $AppItem = $App.Trim()
              Test-Path -Path "${{ github.workspace }}\packages\Updates\$AppItem"
          }

      - name: Install and cache PowerShell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v5.2
        with:
          modules-to-cache: "MSAL.PS::, IntuneWin32App::, Evergreen::, VcRedist::"
          updatable: true
          shell: powershell

      - name: List Modules
        id: list-modules
        shell: powershell
        run: |
          foreach ($module in @("MSAL.PS", "IntuneWin32App", "Evergreen", "VcRedist")) {
              $Version = (Get-Module -Name $module -ListAvailable | Select-Object -First 1).Version.ToString()
              Write-Host "$module version: $Version"
          }

      # Create the app package
      - name: Authn to the Graph API and create package/s
        id: upload-package
        shell: powershell
        working-directory: ${{ github.workspace }}
        env:
          TENANT_ID: ${{ secrets.TENANT_ID }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: |
          Import-Module -Name "MSAL.PS", "IntuneWin32App", "Evergreen", "VcRedist" -Force

          # Authenticate to the Graph API; expects secrets to be passed into environment variables
          Write-Information -MessageData "Authenticate to the Graph API" -InformationAction "Continue"
          $params = @{
              TenantId     = "$env:TENANT_ID"
              ClientId     = "$env:CLIENT_ID"
              ClientSecret = "$env:CLIENT_SECRET"
          }
          Connect-MSIntuneGraph @params

          # Convert $Application into an array because we can't pass an array via inputs into the workflow
          [System.Array] $Applications = ("${{ github.event.inputs.package }}").ToString() -split ","
          $params = @{
              Path        = "${{ github.workspace }}\packages"
              Application = $Applications
              Type        = "Update"
              WorkingPath = "${{ github.workspace }}\output"
              Import      = $true
          }
          & "${{ github.workspace }}\New-Win32Package.ps1" @params
