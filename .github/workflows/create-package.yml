# Creates a Win32 package and optionally imports into a target Intune tenant
# Uses secrets on the repo - TENANT_ID, CLIENT_ID, and CLIENT_SECRET
# to import the package into a target tenant
name: create-package

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
  workflow_dispatch:
    inputs:
      configuration:
        description: Application name.
        required: true
        default: AdobeAcrobatReaderDC

jobs:
  create-package:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Test for Applications.json
        id: test-appjson
        shell: powershell
        run: |
          Test-Path -Path "${{ github.workspace }}\Applications.json"

      - name: Test for package
        id: test-package
        shell: powershell
        run: |
          Test-Path -Path "${{ github.workspace }}\packages\${{ github.event.inputs.configuration }}"

      - name: Install and cache PowerShell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v4.5
        with:
          modules-to-cache: IntuneWin32App, Evergreen, VcRedist
          shell: powershell

      - name: List Modules
        id: list-modules
        shell: powershell
        run: |
          foreach ($module in @("IntuneWin32App", "Evergreen", "VcRedist")) {
            Update-Module -Name $module
            $Version = (Get-Module -Name $module -ListAvailable | Select-Object -First 1).Version.ToString()
            Write-Host "$module version: $Version"
          }

      # Create the app package
      - name: Authn to the Graph API and create package/s
        id: upload-package
        shell: powershell
        run: |
          $params = @{
            TenantId     = "${{ secrets.TENANT_ID }}"
            ClientID     = "${{ secrets.CLIENT_ID }}"
            ClientSecret = "${{ secrets.CLIENT_SECRET }}"
          }
          $global:AuthToken = Connect-MSIntuneGraph @params

          $Apps = Get-Content -Path "${{ github.workspace }}\Applications.json" | ConvertFrom-Json
          $Filter = ($Apps | Where-Object { $_.Name -eq "${{ github.event.inputs.configuration }}" }).Filter

          if ($Null -ne $Filter) {
            if ($Filter -match "Get-VcList") {
                $App = Invoke-Expression -Command $Filter
                $Filename = $(Split-Path -Path $App.Download -Leaf)
                Write-Host "Package: $($App.Name); $Filename."
                $params = @{
                    Path     = "${{ github.workspace }}\packages\${{ github.event.inputs.configuration }}\Source"
                    ItemType = "Directory"
                    Force    = $True
                }
                New-Item @params | Out-Null
                $params = @{
                    Uri             = $App.Download
                    OutFile         = "${{ github.workspace }}\packages\${{ github.event.inputs.configuration }}\Source\$Filename"
                    UseBasicParsing = $True
                }
                Invoke-WebRequest @params
            }
            else {
                $result = Invoke-Expression -Command $Filter | Save-EvergreenApp -CustomPath "${{ github.workspace }}\packages\${{ github.event.inputs.configuration }}\Source"
                Write-Host "Downloaded: $($result.FullName)"
                if ($result.FullName -match "\.zip$") {
                    $params = @{
                        Path            = $result.FullName
                        DestinationPath = "${{ github.workspace }}\packages\${{ github.event.inputs.configuration }}\Source"
                        Verbose         = $True
                    }
                    Expand-Archive @params
                    Remove-Item -Path $result.FullName -Force
                }
            }

            $params = @{
                Application      = "${{ github.event.inputs.configuration }}"
                Path             = "${{ github.workspace }}\packages"
                DisplayNameSuffix = "(Package Factory)"
            }
            . ${{ github.workspace }}\Create-Win32App.ps1 @params
          }
          else {
              Write-Host -Foregroundcolor "Cyan" "Application not supported by this workflow: ${{ github.event.inputs.configuration }}"
          }
